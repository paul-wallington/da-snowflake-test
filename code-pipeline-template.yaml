AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description : Application to create a code pipeline for snowflake lamdba stack

Parameters:
  BranchName:
    Description: GitHub branch name
    Type: String
    Default: master
  RepositoryName:
    Description: GitHub repository name
    Type: String
    Default: test    
  GitHubOwner:
    Type: String
  BuildName:
    Description: CodeBuild project name
    Type: String
    Default: da-snowflake-lambda-code-build-eu-west-2-cftest
  DeployStackName:
    Description: Stack name for deployment
    Type: String
    Default: snowflake-testing

Resources:
      
  ##############################
  ### S3 ####
  ##############################
  CodePipelineArtifactStoreBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: da-snowflake-code-pipeline-artifacts

  CodePipelineArtifactStoreBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref CodePipelineArtifactStoreBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: !Join 
              - ''
              - - !GetAtt 
                  - CodePipelineArtifactStoreBucket
                  - Arn
                - /*
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'aws:kms'
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: !Join 
              - ''
              - - !GetAtt 
                  - CodePipelineArtifactStoreBucket
                  - Arn
                - /*
            Condition:
              Bool:
                'aws:SecureTransport': false  

  ##############################
  ### Webhook ####
  ##############################
  CodePipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: "{{resolve:secretsmanager:da_snowflake_github:SecretString:pat}}"
      Filters:
        - JsonPath: $.ref
          MatchEquals: "refs/heads/{Branch}"
      TargetPipeline: !Ref CodePipeline
      TargetAction: Source
      Name: CodePipelineWebhook
      TargetPipelineVersion: !GetAtt CodePipeline.Version
      RegisterWithThirdParty: true

  ##############################
  ### Code Build Project ####
  ##############################
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Join [ "-", ["da-snowflake-lambda-code-build", !Ref "AWS::Region", "cftest"] ]
      Description: Will build project lambda binaries using sam build in lambda_snowsql docker image
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      Environment:
        Image: lamdba_snowsql:build-python3.7
        ImagePullCredentialsType: SERVICE_ROLE
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
      Artifacts:
        Type: CODEPIPELINE
      Cache: 
        Type: NO_CACHE
      LogsConfig: 
        CloudWatchLogs: 
          Status: ENABLED      

  ##############################
  ### Code Pipeline ####
  ##############################
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Join [ "-", ["da-snowflake-lambda-code-pipeline", !Ref "AWS::Region", "cftest"] ]
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref RepositoryName
                Branch: !Ref BranchName
                OAuthToken: "{{resolve:secretsmanager:da_snowflake_github:SecretString:pat}}"
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: build-with-codebuild            
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild       
                Version: 1
              Configuration:
                ProjectName: !Join [ "-", ["da-snowflake-lambda-code-build", !Ref "AWS::Region", "cftest"] ]
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact 
              Region: !Ref AWS::Region
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: deploy-with-cloudformation            
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation                
                Version: 1
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                RoleArn: !GetAtt CodeDeployRole.Arn
                StackName: !Ref DeployStackName
                TemplatePath: "BuildArtifact::packaged-template.yaml"
              InputArtifacts:
                - Name: BuildArtifact
              Region: !Ref AWS::Region
              RunOrder: 3              
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreBucket
      DisableInboundStageTransitions:
        - StageName: Deploy 
          Reason: "Testing Build" 


  ##############################
  ### Policies and Roles ####
  ##############################
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", ["da-snowflake-lambda-code-pipeline-service-role", !Ref "AWS::Region", "cftest"] ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - codepipeline.amazonaws.com
          Action:
          - sts:AssumeRole          
      Path: /
      Policies:
      - PolicyName: !Join [ "-", ["da-snowflake-lambda-code-pipeline-service-role-policy", !Ref "AWS::Region", "cftest"] ]
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow          
            Action:
              - iam:PassRole
            Resource: "*"
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                - cloudformation.amazonaws.com
                - elasticbeanstalk.amazonaws.com
                - ec2.amazonaws.com
                - ecs-tasks.amazonaws.com
          - Effect: Allow
            Action:
              - codecommit:CancelUploadArchive
              - codecommit:GetBranch
              - codecommit:GetCommit
              - codecommit:GetUploadArchiveStatus
              - codecommit:UploadArchive
            Resource: "*"
          - Effect: Allow
            Action:
              - codedeploy:CreateDeployment
              - codedeploy:GetApplication
              - codedeploy:GetApplicationRevision
              - codedeploy:GetDeployment
              - codedeploy:GetDeploymentConfig
              - codedeploy:RegisterApplicationRevision
            Resource: "*"
          - Effect: Allow
            Action:
              - codestar-connections:UseConnection
            Resource: "*"
          - Effect: Allow
            Action:
              - elasticbeanstalk:*
              - ec2:*
              - elasticloadbalancing:*
              - autoscaling:*
              - cloudwatch:*
              - s3:*
              - sns:*
              - cloudformation:*
              - rds:*
              - sqs:*
              - ecs:*
            Resource: "*"
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
              - lambda:ListFunctions
            Resource: "*"
          - Effect: Allow
            Action:
              - opsworks:CreateDeployment
              - opsworks:DescribeApps
              - opsworks:DescribeCommands
              - opsworks:DescribeDeployments
              - opsworks:DescribeInstances
              - opsworks:DescribeStacks
              - opsworks:UpdateApp
              - opsworks:UpdateStack
            Resource: "*"
          - Effect: Allow
            Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
            Resource: "*"
          - Effect: Allow
            Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
            Resource: "*"
          - Effect: Allow
            Action:
              - devicefarm:ListProjects
              - devicefarm:ListDevicePools
              - devicefarm:GetRun
              - devicefarm:GetUpload
              - devicefarm:CreateUpload
              - devicefarm:ScheduleRun
            Resource: "*"
          - Effect: Allow
            Action:
              - servicecatalog:ListProvisioningArtifacts
              - servicecatalog:CreateProvisioningArtifact
              - servicecatalog:DescribeProvisioningArtifact
              - servicecatalog:DeleteProvisioningArtifact
              - servicecatalog:UpdateProduct
            Resource: "*"
          - Effect: Allow
            Action:
              - cloudformation:ValidateTemplate
            Resource: "*"
          - Effect: Allow
            Action:
              - ecr:DescribeImages
            Resource: "*"

  CodeBuildServiceRoleBasePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Policy used in trust relationship with CodeBuild."
      ManagedPolicyName: !Join [ "-", ["da-snowflake-lamdba-code-build-base-policy", !Ref "AWS::Region", "cftest"] ]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource:
            -  !Join [ "", ["arn:aws:logs:eu-west-2:177539856531:log-group:/aws/codebuild/", !Ref BuildName] ]
            -  !Join [ "", ["arn:aws:logs:eu-west-2:177539856531:log-group:/aws/codebuild/", !Ref BuildName, ":*"] ]
            #- arn:aws:logs:eu-west-2:177539856531:log-group:/aws/codebuild/eu-west-2-da-snowflake-lambda-code-build
            #- arn:aws:logs:eu-west-2:177539856531:log-group:/aws/codebuild/eu-west-2-da-snowflake-lambda-code-build:*              
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketAcl
            - s3:GetBucketLocation
          Resource:
            - arn:aws:s3:::tfgm-da-lamdba*
            # - arn:aws:s3:::da-snowflake-code-pipeline-artifacts*
            - !Join [ "", [!GetAtt CodePipelineArtifactStoreBucket.Arn, "*"] ]
        - Effect: Allow
          Resource:
            #- arn:aws:codebuild:eu-west-2:177539856531:report-group/eu-west-2-da-snowflake-lambda-code-build-*  
            - !Join [ "", ["arn:aws:codebuild:eu-west-2:177539856531:report-group/", !Ref BuildName, "-*"] ]       
          Action:
            - codebuild:CreateReportGroup
            - codebuild:CreateReport
            - codebuild:UpdateReport
            - codebuild:BatchPutTestCases

  CodeBuildImageRepositoryPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Policy used in trust relationship with CodeBuild."
      ManagedPolicyName: !Join [ "-", ["da-snowflake-lamdba-code-build-image-repository-policy", !Ref "AWS::Region", "cftest"] ]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - ecr:GetAuthorizationToken
          Resource:
            - "*"            
        - Effect: Allow
          Action:
            - erc:BatchCheckLayerAvailability
            - erc:GetDownloadUrlForLayer
            - erc:BatchGetImage
            - erc:PutImage
            - erc:InitiateLayerUpload
            - erc:UploadLayerPart
            - erc:CompleteLayerUpload            
          Resource:
            - "*"
          
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", ["da-snowflake-lamdba-code-build-service-role", !Ref "AWS::Region", "cftest"] ]
      # RoleName: !Join [ "-", [!Ref "AWS::StackName", "code-build-service-role-cftest", !Ref "AWS::Region"] ]
      Path: "/service-role/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref CodeBuildServiceRoleBasePolicy
        - !Ref CodeBuildImageRepositoryPolicy

  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", ["da-snowflake-lamdba-code-deploy-role", !Ref "AWS::Region", "cftest"] ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - cloudformation.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:          
      - PolicyName:  !Join [ "-", ["da-snowflake-lamdba-code-deploy-policy", !Ref "AWS::Region", "cftest"] ]
        PolicyDocument:      
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:AuthorizeSecurityGroupIngress
            - ec2:DescribeSecurityGroups
            - ec2:CreateSecurityGroup
            - ec2:DescribeSecurityGroupReferences
            - ec2:DeleteSecurityGroup
            - ec2:DescribeStaleSecurityGroups            
            - s3:CreateBucket
            - s3:DeleteBucket            
            - s3:GetBucketVersioning
            - s3:PutObject
            - s3:GetObject
            - s3:PutBucketPolicy
            - s3:GetObjectVersion                        
            - iam:CreateRole
            - iam:AttachRolePolicy
            - iam:PutRolePolicy
            - iam:PassRole            
            - iam:DeleteRolePolicy            
            - iam:GetRole
            - iam:GetPolicy
            - iam:DeleteRole
            - iam:CreatePolicy
            - iam:DetachRolePolicy            
            - cloudformation:CreateChangeSet
            - secretsmanager:GetSecretValue
            - codedeploy:*
            - apigateway:*            
            - lambda:*
            Resource: "*"          
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonRDSFullAccess
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/AWSCloudTrailFullAccess
      - arn:aws:iam::aws:policy/AmazonSSMFullAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
      - arn:aws:iam::aws:policy/CloudWatchEventsFullAccess      




