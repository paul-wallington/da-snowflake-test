AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description : An AWS Serverless Application for snowflake data ingestion

#Parameters:
  #SnowflakeIAMUser:
  #  Type: String
  #  Description: Stage credential SNOWFLAKE_IAM_USER
  #  Default: ""
  #  AllowedPattern: ^[-a-zA-Z0-9_./]+:[0-9]+$
#  SnowflakeExternalId:
#    Type: String
#    Description: Stage credential AWS_EXTERNAL_ID
#    Default: "IK47054_SFCRole=2_WMe2nBFlcau6mO3TImVPhdcU6SE="
#    AllowedPattern: ^[-a-zA-Z0-9_./]+:[0-9]+$

#Conditions:
#  HasSnowflakeIamUser: !Not
#    - !Equals
#      - !Ref 'SnowflakeIAMUser'
#      - ''

Resources:

  ##############################
  ### S3 ####
  ##############################
  SnowflakeLandingS3:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: da-snowflake-landing
      #NotificationConfiguration:
      #  LambdaConfigurations:
      #  - Event: 's3:ObjectCreated:Put''
      #    Function: !GetAtt SnowflakeValidate.Arn
      PublicAccessBlockConfiguration:
        BlockPublicAcls : true
        BlockPublicPolicy : true
        IgnorePublicAcls : true
        RestrictPublicBuckets : true
    DeletionPolicy: Delete


  ##############################
  ### Policies and Roles ####
  ##############################

  ### https://docs:snowflake:
  ###    net/manuals/user-guide/data-load-s3-config:
  ###      html#option-1-configuring-a-snowflake-storage-integration:
  SnowflakeS3StagePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Join [ "-", [!Ref "AWS::Region", "da-snowflake-s3-stage-policy"] ]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObjectVersion
            - s3:DeleteObject
            - s3:GetObjectVersion
          Resource:
            - "arn:aws:s3:::tfgm-da-segmentation-postcode-output-area/*"
        - Effect: Allow
          Action:
            - s3:ListBucket
          Resource:
            - "arn:aws:s3:::tfgm-da-segmentation-postcode-output-area/*"
          Condition:
            StringLike:
              s3:prefix:
              - "*"

  SnowflakeUserRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", [!Ref "AWS::Region", "snowflake-s3-access-role", !Ref SnowflakeLandingS3] ]
      AssumeRolePolicyDocument:
      # Policy Document to allow snowflake to assume the role
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: "{{resolve:secretsmanager:tfgm_da_snowflake_landing_integration:SecretString:snowflake-iam-user}}"
                #- !If
                #  - HasSnowflakeIamUser
                #  - "arn:aws:iam::213245706025:user/1wy3-s-iess2927"
                #  - !Ref 'AWS::AccountId'
            Action: sts:AssumeRole
            Condition:
              StringLike:
                sts:ExternalId: "{{resolve:secretsmanager:tfgm_da_snowflake_landing_integration:SecretString:snowflake-aws-external-id}}"


Outputs:
  SnowflakeARN:
    Value: !GetAtt SnowflakeUserRole.Arn
    Description: ARN of user role
